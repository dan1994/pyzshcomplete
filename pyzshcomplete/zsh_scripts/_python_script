#compdef -p *.py

_python_script() {
    local script=${words[1]}

    __python_argcomplete_scan_head ${script} || return 1

    # Skip any other completion function
    _compskip=all

    local arguments=(
        ${(f)"$(PYZSHCOMPLETE=1 __python_argcomplete_run ${script})"}
    )
    _arguments -s -w : ${arguments[@]}
}


### The following code is taken from the argcomplete project, including
### original copyright. Changes from the original will be marked by a comment
### Starting with CHANGE.
### Original code:
### https://github.com/kislyuk/argcomplete/blob/v1.11.1/argcomplete/bash_completion.d/python-argcomplete

# Copyright 2012-2019, Andrey Kislyuk and argcomplete contributors.
# Licensed under the Apache License. See https://github.com/kislyuk/argcomplete for more info.

# Copy of __expand_tilde_by_ref from bash-completion
__python_argcomplete_expand_tilde_by_ref () {
    if [ "${!1:0:1}" = "~" ]; then
        if [ "${!1}" != "${!1//\/}" ]; then
            eval $1="${!1/%\/*}"/'${!1#*/}';
        else
            eval $1="${!1}";
        fi;
    fi
}

# Run something, muting output or redirecting it to the debug stream
# depending on the value of _ARC_DEBUG.
__python_argcomplete_run() {
    if [[ -z "$_ARC_DEBUG" ]]; then
        "$@" 8>&1 9>&2 1>/dev/null 2>&1
    else
        "$@" 8>&1 9>&2 1>&9 2>&1
    fi
}

# Scan the beginning of an executable file ($1) for a regexp ($2). By default,
# scan for the magic string indicating that the executable supports the
# argcomplete completion protocol. Scan the first kilobyte.
__python_argcomplete_scan_head() {
    # CHANGE: the zsh read builtin has different options and behaves differently
    read -s -r -k 1024 -u 0 < "$1"
    [[ "$REPLY" =~ ${2:-PYTHON_ARGCOMPLETE_OK} ]]
}
